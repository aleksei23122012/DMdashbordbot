<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Бот ОВ</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

<style>
  :root {
    /* Палитра */
    --ui-primary-blue: #357ABD;
    --ui-primary-blue-hover: #2A65B2;
    --palette-bg-color: #F5F7FA;
    --palette-card-color: #FFFFFF;
    --palette-text-primary: #1D232A;
    --palette-text-secondary: #6C757D;
    --palette-border-color: #E9ECEF;
    --toggle-bg: #e9ecef;
    --shadow: 0 6px 20px rgba(0, 0, 0, 0.06);
  }

  /* Общие стили */
  body, html {
    height: 100%; margin: 0; font-family: 'Inter', sans-serif;
    background-color: var(--palette-bg-color); color: var(--palette-text-primary);
    display: flex; justify-content: center; align-items: center;
    padding: 20px; box-sizing: border-box;
  }

  /* Основной контейнер */
  .app-container {
    width: 100%; max-width: 800px; height: 95%; max-height: 850px;
    display: flex; flex-direction: column; background-color: var(--palette-card-color);
    border-radius: 12px; box-shadow: var(--shadow); border: 1px solid var(--palette-border-color);
    overflow: hidden;
  }

  /* --- БЛОК В: Бегунок и кнопка "Назад" --- */
  .block-v {
    padding: 15px 25px; border-bottom: 1px solid var(--palette-border-color);
    display: flex; align-items: center; justify-content: space-between;
    min-height: 54px; box-sizing: border-box; position: relative;
  }
  
  .back-button {
    font-size: 15px; font-weight: 600; color: var(--ui-primary-blue);
    background: transparent; border: none; cursor: pointer; padding: 8px;
    opacity: 1; transition: opacity 0.3s;
  }

  /* Обертка для центрирования бегунка */
  .toggle-wrapper {
      position: absolute; left: 50%; transform: translateX(-50%);
  }
  
  /* Стили для бегунка-переключателя */
  .toggle-switch {
    position: relative; display: inline-block; width: 220px; height: 44px;
    background-color: var(--toggle-bg); border-radius: 22px; cursor: pointer;
  }
  .toggle-switch input { opacity: 0; width: 0; height: 0; }
  .toggle-slider {
    position: absolute; top: 4px; left: 4px; height: 36px; width: 108px;
    background-color: var(--ui-primary-blue); border-radius: 18px;
    transition: transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }
  .toggle-labels {
    position: absolute; top: 0; left: 0; right: 0; bottom: 0;
    display: flex; align-items: center; pointer-events: none;
  }
  .toggle-labels span {
    flex: 1; text-align: center; font-size: 15px; font-weight: 600;
    color: var(--palette-text-secondary); transition: color 0.3s ease;
  }
  .toggle-switch input:checked + .toggle-slider { transform: translateX(104px); }
  .label-brokerage { color: #fff; }
  
  /* Класс для скрытия элементов */
  .hidden { opacity: 0; pointer-events: none; }

  /* --- БЛОК Т: Поле для ввода --- */
  .block-t { padding: 20px 25px; }
  .block-t input[type="text"] {
    width: 100%; padding: 12px 16px; font-size: 16px; font-family: 'Inter', sans-serif;
    border: 1px solid var(--palette-border-color); border-radius: 8px; box-sizing: border-box;
  }

  /* --- БЛОК О: Основной контент --- */
  .block-o {
    flex-grow: 1; padding: 25px; box-sizing: border-box;
    display: grid; grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(3, 1fr); gap: 20px;
  }
  .block-o button {
    width: 100%; height: 100%; font-size: 17px; font-weight: 600; color: #fff;
    background-color: var(--ui-primary-blue); border: none; border-radius: 10px; cursor: pointer;
    transition: background-color 0.2s, transform 0.1s;
  }
  .block-o button:hover { background-color: var(--ui-primary-blue-hover); }

  /* Стили для таблицы результатов */
  .result-table { width: 100%; border-collapse: collapse; font-size: 16px; }
  .result-table th, .result-table td {
      border: 1px solid var(--palette-border-color); padding: 12px; text-align: left;
  }
  .result-table th { background-color: #f8f9fa; font-weight: 600; }
</style>
</head>
<body>

<div class="app-container">
  
  <!-- БЛОК В -->
  <div class="block-v">
    <button id="back-button" class="back-button hidden">← Назад</button>
    <div class="toggle-wrapper">
        <label class="toggle-switch">
          <input type="checkbox" id="mode-toggle">
          <span class="toggle-slider"></span>
          <div class="toggle-labels">
            <span class="label-brokerage">Брокеридж</span>
            <span class="label-packaging">Упаковка</span>
          </div>
        </label>
    </div>
  </div>

  <!-- БЛОК Т -->
  <div class="block-t">
    <input type="text" placeholder="Введите возражение">
  </div>

  <!-- БЛОК О -->
  <div class="block-o" id="main-block">
    <!-- Начальное состояние: 6 кнопок -->
    <button>Не интересно</button>
    <button>Дорого</button>
    <button>Нет денег</button>
    <button>Подумаю</button>
    <button>Не готов в ближайшее время</button>
    <button>Отправьте на почту</button>
  </div>
</div>

<script>
  // --- Элементы DOM ---
  const mainBlock = document.getElementById('main-block');
  const backButton = document.getElementById('back-button');
  const modeToggle = document.getElementById('mode-toggle');
  
  const initialBlockOContent = mainBlock.innerHTML;

  // --- Функции ---
  function showResultTable(objectionText) {
    // Создаем HTML для таблицы, подставляя текст нажатой кнопки
    const resultTableContent = `
      <table class="result-table">
        <thead><tr><th>Параметр</th><th>Значение</th></tr></thead>
        <tbody>
          <tr><td>Тип возражения</td><td>${objectionText}</td></tr>
          <tr><td>Рекомендуемый ответ</td><td>Здесь будет скрипт ответа...</td></tr>
          <tr><td>Вероятность успеха</td><td>...%</td></tr>
        </tbody>
      </table>`;

    mainBlock.innerHTML = resultTableContent;
    mainBlock.style.display = 'block'; // Меняем сетку на блочный элемент для таблицы
    backButton.classList.remove('hidden'); // Показываем кнопку "Назад"
  }

  function showInitialButtons() {
    mainBlock.innerHTML = initialBlockOContent;
    mainBlock.style.display = 'grid'; // Возвращаем отображение сеткой
    backButton.classList.add('hidden'); // Скрываем кнопку "Назад"
    setupObjectionButtonListeners(); // **ВАЖНО:** Заново назначаем слушатели на кнопки
  }

  function setupObjectionButtonListeners() {
    const objectionButtons = mainBlock.querySelectorAll('button');
    objectionButtons.forEach(button => {
      button.addEventListener('click', () => {
        // При клике передаем текст кнопки в функцию отображения таблицы
        showResultTable(button.textContent);
      });
    });
  }

  // --- Назначение слушателей событий ---
  backButton.addEventListener('click', showInitialButtons);
  setupObjectionButtonListeners(); // Назначаем слушатели при первой загрузке

  // Логика для бегунка (БЛОК В)
  modeToggle.addEventListener('change', function() {
    const labelBrokerage = document.querySelector('.label-brokerage');
    const labelPackaging = document.querySelector('.label-packaging');
    if (this.checked) {
      labelBrokerage.style.color = 'var(--palette-text-secondary)';
      labelPackaging.style.color = '#fff';
      console.log('Выбран режим: Упаковка');
      // В будущем здесь будет логика для смены контента на режим "Упаковка"
    } else {
      labelBrokerage.style.color = '#fff';
      labelPackaging.style.color = 'var(--palette-text-secondary)';
      console.log('Выбран режим: Брокеридж');
      showInitialButtons(); // При возврате в режим "Брокеридж" показываем его кнопки
    }
  });
</script>

</body>
</html>
