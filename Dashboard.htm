<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Дашборд</title>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary-blue: #007AFF; --dark-blue: #0056b3; --light-blue: #EAF5FF;
            --primary-green: #34C759; --light-green: #E3F8E9; --primary-yellow: #FF9500;
            --light-yellow: #FFF6E5; --bg-color: #F5F7FA; --card-color: #FFFFFF;
            --text-primary: #1D232A; --text-secondary: #6C757D; --border-color: #E9ECEF;
            --light-red: #FFE3E3; --indicator-green: #28a745; --indicator-red: #dc3545;
            --chart-red: #e53935; --chart-blue: #1e88e5;
        }
        body, html { height: 100%; margin: 0; font-family: 'Inter', sans-serif; background-color: var(--bg-color); color: var(--text-primary); overflow-x: hidden; }
        .dashboard-container { display: flex; flex-direction: column; min-height: 100vh; }
        .block-v { height: 10vh; display: flex; justify-content: space-between; align-items: center; padding: 0 24px; background-color: var(--card-color); border-bottom: 1px solid var(--border-color); box-sizing: border-box; flex-shrink: 0; }
        .header-buttons button { margin-right: 12px; padding: 10px 20px; border: none; border-radius: 8px; background-color: var(--dark-blue); color: white; cursor: pointer; font-size: 14px; font-weight: 600; transition: background-color 0.2s, opacity 0.2s; opacity: 0.6; }
        .header-buttons button.active { opacity: 1; }
        .user-info-container { display: flex; align-items: center; gap: 16px; text-align: right; }
        #operator-name { font-weight: 700; font-size: 22px; }
        .content-area { flex-grow: 1; padding: 12px; box-sizing: border-box; overflow: hidden; }
        .view { display: none; }
        .view.active { display: flex; }
        #view-day.active, #view-month.active { flex-direction: row; gap: 12px; height: calc(90vh - 24px); }
        .view:not(#view-day):not(#view-month) { align-items: center; justify-content: center; }
        .block-l { width: 400px; flex-shrink: 0; }
        .block-c { flex-grow: 1; }
        .block-p { width: 400px; flex-shrink: 0; }
        .block-l, .block-c, .block-p, .block-team-custom, .dynamics-block { padding: 20px; box-sizing: border-box; display: flex; flex-direction: column; background-color: var(--card-color); border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.04); }
        .block-l-top { height: 50%; position: relative; display: flex; justify-content: center; align-items: center; }
        .chart-center-text { position: absolute; text-align: center; pointer-events: none; }
        .chart-center-text .title { font-size: 18px; color: var(--text-secondary); }
        .chart-center-text .value { font-size: 30px; font-weight: 700; }
        .block-l-bottom { height: 50%; display: flex; flex-direction: column; justify-content: center; gap: 16px; }
        .horizontal-bar { height: 45px; border-radius: 10px; display: flex; align-items: center; padding-left: 15px; font-size: 16px; font-weight: 500; transition: transform 0.2s ease; }
        .horizontal-bar:hover { transform: scale(1.02); }
        .bar-calls { background-color: var(--light-blue); color: var(--primary-blue); width: 100%; }
        .bar-leads { background-color: var(--light-yellow); color: var(--primary-yellow); width: 80%; }
        .bar-time { background-color: var(--light-green); color: var(--primary-green); width: 60%; }
        .block-c-top { height: 75%; overflow-y: auto; background-color: #F8F9FA; padding: 16px; border-radius: 8px; font-size: 15px; line-height: 1.6; }
        .block-c-top p { margin: 0; white-space: pre-line; }
        .block-c-bottom { height: 25%; display: flex; justify-content: center; align-items: center; padding-top: 20px; }
        .cat-image { max-width: 100%; max-height: 100%; border-radius: 8px; object-fit: cover; }
        .block-p { display: flex; flex-direction: column; }
        .data-table { width: 100%; border-collapse: collapse; } 
        .data-table th, .data-table td { border-bottom: 1px solid var(--border-color); padding: 8px; text-align: left; vertical-align: middle; }
        .data-table td { font-size: 14px; text-align: center;}
        .data-table tr:last-child td { border-bottom: none; }
        .data-table th { background-color: var(--dark-blue); color: white; font-size: 14px; font-weight: 600; position: sticky; top: -21px; text-align: center;}
        .data-table tr.highlight-red { background-color: var(--light-red); }
        .data-table tr.current-user-row { background-color: var(--light-blue) !important; font-weight: 600; }
        .block-title { font-size: 20px; font-weight: 700; margin-bottom: 16px; text-align: center; }
        .indicator-col { width: 30px; text-align: center; font-size: 18px; font-weight: bold; }
        .indicator-green { color: var(--indicator-green); }
        .indicator-red { color: var(--indicator-red); }
        .separator-right { border-right: 2px solid var(--dark-blue); }
        
        #view-month .block-c-top { height: 60%; }
        #view-month .block-c-bottom-month { height: auto; flex-grow: 1; flex-direction: row; display: flex; gap: 12px; align-items: center; justify-content: center; padding-top: 20px;}
        #view-month .plan-indicator { flex-grow: 1; background-color: var(--dark-blue); color: white; border-radius: 12px; display: flex; flex-direction: column; justify-content: center; align-items: center; font-size: 13px; font-weight: 500; padding: 8px; text-align: center; height: 100%; max-height: 100px;}
        #view-month .plan-indicator .value { font-size: 22px; font-weight: 700; margin-top: 4px; }
        #view-month .block-p-upper-month { flex-shrink: 0; }
        #view-month .block-p-lower-month { flex-grow: 1; overflow-y: auto; padding-top: 20px; }
        .block-p-upper-day { flex-shrink: 0; }
        .block-p-lower-day { flex-grow: 1; overflow-y: auto; padding-top: 20px; }
        
        .placeholder-message { font-size: 22px; color: var(--text-secondary); }

        @media (max-width: 1024px) {
            #view-day, #view-month, #view-position, #view-dynamics { flex-direction: column; height: auto; }
            .block-l, .block-c, .block-p, .block-team-custom { min-height: auto; }
            .block-v { height: auto; padding: 12px; flex-wrap: wrap; gap: 10px; }
            #operator-name { font-size: 18px; }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- ... HTML ... -->
        <div class="block-v">
            <div class="header-buttons">
                <button id="btn-day" class="active">День</button>
                <button id="btn-month">Месяц</button>
                <button id="btn-position">Рейтинг</button>
                <button id="btn-dynamics">Динамика</button>
            </div>
            <div class="user-info-container">
                <span id="context-name"></span>
                <span id="operator-name">Загрузка...</span>
            </div>
        </div>

        <div class="content-area">
            <div id="view-day" class="view active">
                 <div class="block-l">
                    <div class="block-l-top">
                        <div class="chart-center-text">
                            <div class="title">Трафик</div>
                            <div class="value" id="trafic-value-day">...</div>
                        </div>
                        <canvas id="doughnutChartDay"></canvas>
                    </div>
                    <div class="block-l-bottom">
                        <div class="horizontal-bar bar-calls" id="kz-bar-day"></div>
                        <div class="horizontal-bar bar-leads" id="lid-bar-day"></div>
                        <div class="horizontal-bar bar-time" id="avg-time-lid-bar-day"></div>
                    </div>
                </div>
                <div class="block-c">
                    <div class="block-c-top">
                        <p id="os-text-day">Загрузка обратной связи...</p>
                    </div>
                    <div class="block-c-bottom">
                        <img id="cat-image-day" src="" alt="Кот" class="cat-image">
                    </div>
                </div>
                <div class="block-p">
                    <div class="block-p-upper-day">
                         <table class="data-table">
                            <thead><tr><th>Показатели</th><th>Твои</th><th class="indicator-col"></th><th>Средние</th></tr></thead>
                            <tbody>
                                <tr><td>Количество звонков</td><td id="day-user-kz">...</td><td id="day-ind-kz" class="indicator-col"></td><td id="day-srav-kz">...</td></tr>
                                <tr><td>Количество лидов</td><td id="day-user-lid">...</td><td id="day-ind-lid" class="indicator-col"></td><td id="day-srav-lid">...</td></tr>
                                <tr><td>Время на лид</td><td id="day-user-time">...</td><td id="day-ind-time" class="indicator-col"></td><td id="day-srav-time">...</td></tr>
                                <tr><td>Трафик</td><td id="day-user-trafic">...</td><td id="day-ind-trafic" class="indicator-col"></td><td id="day-srav-trafic">...</td></tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="block-p-lower-day">
                        <table class="data-table">
                            <thead><tr><th>Теги</th><th>Кол-во</th></tr></thead>
                            <tbody id="tags-table-body-day"></tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div id="view-month" class="view">
                <div class="block-l">
                    <div class="block-l-top">
                        <div class="chart-center-text"><div class="title">Трафик (Месяц)</div><div class="value" id="trafic-value-month">...</div></div><canvas id="doughnutChartMonth"></canvas>
                    </div>
                    <div class="block-l-bottom">
                        <div class="horizontal-bar bar-calls" id="kz-bar-month">...</div><div class="horizontal-bar bar-leads" id="lid-bar-month">...</div><div class="horizontal-bar bar-time" id="avg-time-lid-bar-month">...</div>
                    </div>
                </div>
                <div class="block-c">
                     <div class="block-c-top">
                        <p id="os-text-month">Загрузка обратной связи...</p>
                    </div>
                     <div class="block-c-bottom-month">
                        <div class="plan-indicator"><div>Выполнение плана по трафику (прогноз):</div><div id="plan-trafic-prognoz-value" class="value">...</div></div>
                        <div class="plan-indicator"><div>Выполнение плана по лидам (прогноз):</div><div id="plan-lid-prognoz-value" class="value">...</div></div>
                    </div>
                </div>
                <div class="block-p">
                    <div class="block-p-upper-month">
                         <table class="data-table">
                            <thead><tr><th>Показатели</th><th>Твои</th><th class="indicator-col"></th><th>Средние</th></tr></thead>
                            <tbody>
                                <tr><td>Количество звонков</td><td id="month-user-kz">...</td><td id="month-ind-kz" class="indicator-col"></td><td id="month-srav-kz">...</td></tr>
                                <tr><td>Количество лидов</td><td id="month-user-lid">...</td><td id="month-ind-lid" class="indicator-col"></td><td id="month-srav-lid">...</td></tr>
                                <tr><td>Время на лид</td><td id="month-user-time">...</td><td id="month-ind-time" class="indicator-col"></td><td id="month-srav-time">...</td></tr>
                                <tr><td>Трафик</td><td id="month-user-trafic">...</td><td id="month-ind-trafic" class="indicator-col"></td><td id="month-srav-trafic">...</td></tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="block-p-lower-month">
                        <table class="data-table">
                            <thead><tr><th>Теги</th><th>Кол-во</th></tr></thead>
                            <tbody id="tags-table-body-month"></tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <div id="view-position" class="view"><h2 class="placeholder-message">Вкладка в разработке</h2></div>
            <div id="view-dynamics" class="view"><h2 class="placeholder-message">Вкладка в разработке</h2></div>
        </div>
    </div>

    <script>
        // --- ПОДКЛЮЧЕНИЕ К SUPABASE ---
        // ИЗМЕНЕНИЕ: Вставлены правильные данные для подключения
        const SUPABASE_URL = 'https://yhjrhnglgtenxwncrrnf.supabase.co'; 
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InloanJobmdsZ3Rlbnh3bmNycm5mIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzA4MDcwOSwiZXhwIjoyMDY4NjU2NzA5fQ.n-DaOFmspPq26s4QjmP-nQ7FoktOxmvq5JavTKdysBo';
        const supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // --- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ---
        let doughnutChartDay, doughnutChartMonth;
        // ИЗМЕНЕНИЕ: Задаем TG ID пользователя, которого ищем
        let currentUserTgId = "Aleksei_Li_Radievich"; 
        
        const TAG_MAP = {"t_net": "Теги не проставлены", "t_avtootvet": "Автоответчик", "t_lid": "Лид", "t_neinteres": "Не интересно", "t_finorg": "Фин. орг.", "t_perezvon": "Перезвонить позже", "t_woman": "Женщина", "t_sbros": "Сброс", "t_nomany": "Нет денег", "t_buisnes": "Есть бизнес", "t_mat": "Ругается", "t_idiot": "Неадекват", "t_deti": "Дети", "t_old": "Пенсионер", "t_bankrot": "Банкрот", "t_duble": "Дубль", "t_gos": "Госслужащие"};
        const CAT_IMAGE_MAP = {1: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat1.png', 2: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat2.png', 3: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat3.png', 4: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat4.png', 5: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat5.png'};
        const DEFAULT_CAT_IMAGE = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTTAxrOH3BsNrlwQ7MRFAM5YQfoyo4uSbgQVg&s';
        
        // --- ФУНКЦИИ-ПОМОЩНИКИ ---
        function formatInterval(intervalStr) {
            if (!intervalStr) return "00:00:00";
            return intervalStr.split('.')[0]; 
        }
        
        function updateDoughnutChart(chartInstance, percentage = 0) { 
            if (!chartInstance) return;
            const validPercentage = Math.max(0, Math.min(100, percentage));
            chartInstance.data.datasets[0].data = [validPercentage, 100 - validPercentage]; 
            chartInstance.update(); 
        }

        function setComparisonIndicator(elementId, userValue, avgValue, isTime = false) {
            const element = document.getElementById(elementId);
            if (!element || userValue === null || userValue === undefined || avgValue === null || avgValue === undefined) { 
                if (element) element.textContent = '---'; 
                return; 
            }
            const userSeconds = isTime ? timeToSeconds(userValue) : parseFloat(userValue);
            const avgSeconds = isTime ? timeToSeconds(avgValue) : parseFloat(avgValue);
            
            let userIsBetter = isTime ? userSeconds < avgSeconds : userSeconds > avgSeconds; 
            
            element.textContent = userIsBetter ? '>' : '<'; 
            element.className = userIsBetter ? 'indicator-col indicator-green' : 'indicator-col indicator-red';
        }
        
        function timeToSeconds(timeStr) {
            if (!timeStr || typeof timeStr !== 'string') return 0;
            const parts = formatInterval(timeStr).split(':');
            if (parts.length !== 3) return 0;
            return parseInt(parts[0], 10) * 3600 + parseInt(parts[1], 10) * 60 + parseInt(parts[2], 10);
        }

        function updateTagsTable(tbodyId, data) {
            const tbody = document.getElementById(tbodyId);
            if (!tbody || !data) { tbody.innerHTML = '<tr><td colspan="2">Нет данных</td></tr>'; return; }
            tbody.innerHTML = '';
            
            const tagsArray = Object.keys(data)
                .filter(key => key.startsWith('t_') && key !== 't_os')
                .map(key => ({ key, name: TAG_MAP[key] || key, count: data[key] || 0 }))
                .filter(tag => tag.count > 0)
                .sort((a, b) => b.count - a.count);
            
            if (tagsArray.length === 0) {
                 tbody.innerHTML = '<tr><td colspan="2">Теги не найдены</td></tr>';
                 return;
            }

            tagsArray.forEach(tag => {
                const row = document.createElement('tr');
                if (tag.key === 't_net') row.classList.add('highlight-red');
                row.innerHTML = `<td>${tag.name}</td><td>${tag.count}</td>`;
                tbody.appendChild(row);
            });
        }

        // --- ГЛАВНАЯ ФУНКЦИЯ ЗАГРУЗКИ ДАННЫХ ---
        async function fetchDashboardData(period) {
            const userTable = period === 'day' ? 'TMday' : 'TMmonth';
            const avgTable = period === 'day' ? 'AVGday' : 'AVGmonth';
            
            // ИЗМЕНЕНИЕ: Ищем по `tg` и используем `maybeSingle()` для большей надежности
            const userRequest = supabaseClient.from(userTable).select('*').eq('tg', currentUserTgId).maybeSingle();
            const avgRequest = supabaseClient.from(avgTable).select('*').maybeSingle();

            const [userResponse, avgResponse] = await Promise.all([userRequest, avgRequest]);

            if (userResponse.error || avgResponse.error) {
                console.error(`Ошибка Supabase:`, userResponse.error || avgResponse.error);
                alert(`Произошла ошибка при загрузке данных. Подробности в консоли.`);
                return;
            }
            
            const userData = userResponse.data;
            const avgData = avgResponse.data;
            
            if (!userData) {
                alert(`Данные для пользователя с tg ID "${currentUserTgId}" не найдены в таблице ${userTable}.`);
                return;
            }
             if (!avgData) {
                alert(`Средние данные не найдены в таблице ${avgTable}.`);
                return;
            }

            // --- ОБЩИЕ ДАННЫЕ В ШАПКЕ ---
            document.getElementById('operator-name').textContent = userData.operator;
            if (userData.dolg) {
                document.getElementById('btn-position').textContent = `Все ${userData.dolg}`;
            }

            // --- ЗАПОЛНЕНИЕ ВКЛАДКИ ---
            if (period === 'day') {
                document.getElementById('context-name').textContent = userData.Team;
                // Блок Л
                document.getElementById('trafic-value-day').textContent = formatInterval(userData.trafic);
                updateDoughnutChart(doughnutChartDay, (userData.per_trafic || 0) * 100);
                document.getElementById('kz-bar-day').textContent = `Количество звонков - ${userData.kz || 0}`;
                document.getElementById('lid-bar-day').textContent = `Количество лидов - ${userData.lid || 0}`;
                document.getElementById('avg-time-lid-bar-day').textContent = `Время на лид - ${formatInterval(userData.avg_time_lid)}`;
                // Блок С
                document.getElementById('os-text-day').textContent = userData.OS || "Обратная связь отсутствует.";
                document.getElementById('cat-image-day').src = CAT_IMAGE_MAP[userData.cat] || DEFAULT_CAT_IMAGE;
                // Блок П
                document.getElementById('day-user-kz').textContent = userData.kz;
                document.getElementById('day-srav-kz').textContent = avgData.kz;
                setComparisonIndicator('day-ind-kz', userData.kz, avgData.kz);
                document.getElementById('day-user-lid').textContent = userData.lid;
                document.getElementById('day-srav-lid').textContent = avgData.lid;
                setComparisonIndicator('day-ind-lid', userData.lid, avgData.lid);
                document.getElementById('day-user-time').textContent = formatInterval(userData.avg_time_lid);
                document.getElementById('day-srav-time').textContent = formatInterval(avgData.avg_time_lid);
                setComparisonIndicator('day-ind-time', userData.avg_time_lid, avgData.avg_time_lid, true);
                document.getElementById('day-user-trafic').textContent = formatInterval(userData.trafic);
                document.getElementById('day-srav-trafic').textContent = formatInterval(avgData.trafic);
                setComparisonIndicator('day-ind-trafic', userData.trafic, avgData.trafic, true);
                updateTagsTable('tags-table-body-day', userData);

            } else if (period === 'month') {
                document.getElementById('context-name').textContent = avgData.month || "Месяц";
                // Блок Л
                document.getElementById('trafic-value-month').textContent = formatInterval(userData.trafic);
                updateDoughnutChart(doughnutChartMonth, (userData.per_trafic || 0) * 100);
                document.getElementById('kz-bar-month').textContent = `Количество звонков - ${userData.kz || 0}`;
                document.getElementById('lid-bar-month').textContent = `Количество лидов - ${userData.lid || 0}`;
                document.getElementById('avg-time-lid-bar-month').textContent = `Время на лид - ${formatInterval(userData.avg_time_lid)}`;
                // Блок С
                document.getElementById('os-text-month').textContent = userData.OS || "Обратная связь отсутствует.";
                document.getElementById('plan-trafic-prognoz-value').textContent = `${Math.round((userData.per_trafic_prognoz || 0) * 100)}%`;
                document.getElementById('plan-lid-prognoz-value').textContent = `${Math.round((userData.per_lid_prognoz || 0) * 100)}%`;
                // Блок П
                document.getElementById('month-user-kz').textContent = userData.kz;
                document.getElementById('month-srav-kz').textContent = avgData.kz;
                setComparisonIndicator('month-ind-kz', userData.kz, avgData.kz);
                document.getElementById('month-user-lid').textContent = userData.lid;
                document.getElementById('month-srav-lid').textContent = avgData.lid;
                setComparisonIndicator('month-ind-lid', userData.lid, avgData.lid);
                document.getElementById('month-user-time').textContent = formatInterval(userData.avg_time_lid);
                document.getElementById('month-srav-time').textContent = formatInterval(avgData.avg_time_lid);
                setComparisonIndicator('month-ind-time', userData.avg_time_lid, avgData.avg_time_lid, true);
                document.getElementById('month-user-trafic').textContent = formatInterval(userData.trafic);
                document.getElementById('month-srav-trafic').textContent = formatInterval(avgData.trafic);
                setComparisonIndicator('month-ind-trafic', userData.trafic, avgData.trafic, true);
                updateTagsTable('tags-table-body-month', userData);
            }
        }
        
        // --- ИНИЦИАЛИЗАЦИЯ СТРАНИЦЫ ---
        document.addEventListener('DOMContentLoaded', () => {
            const darkBlueColor = getComputedStyle(document.documentElement).getPropertyValue('--dark-blue').trim();
            const chartOptions = { responsive: true, maintainAspectRatio: false, cutout: '80%', plugins: { legend: { display: false }, tooltip: { enabled: false } } };
            const chartDataTemplate = { labels: ['Процент трафика', 'Остаток'], datasets: [{ data: [0, 100], backgroundColor: [ darkBlueColor, '#E9ECEF' ], borderColor: 'transparent' }] };
            
            const ctxDay = document.getElementById('doughnutChartDay').getContext('2d');
            doughnutChartDay = new Chart(ctxDay, { type: 'doughnut', data: JSON.parse(JSON.stringify(chartDataTemplate)), options: chartOptions });
            
            const ctxMonth = document.getElementById('doughnutChartMonth').getContext('2d');
            doughnutChartMonth = new Chart(ctxMonth, { type: 'doughnut', data: JSON.parse(JSON.stringify(chartDataTemplate)), options: chartOptions });
            
            const btnDay = document.getElementById('btn-day');
            const btnMonth = document.getElementById('btn-month');
            const btnPosition = document.getElementById('btn-position');
            const btnDynamics = document.getElementById('btn-dynamics');
            const allViews = document.querySelectorAll('.view');
            const allButtons = document.querySelectorAll('.header-buttons button');

            function switchView(viewId, buttonToActivate, period) {
                allViews.forEach(view => view.style.display = 'none');
                allButtons.forEach(button => button.classList.remove('active'));
                
                const viewToShow = document.getElementById(viewId);
                viewToShow.style.display = 'flex';
                viewToShow.classList.add('active'); // Keep class for potential styling
                buttonToActivate.classList.add('active');
                
                if (period === 'day' || period === 'month') {
                    fetchDashboardData(period);
                }
            }

            btnDay.addEventListener('click', () => { switchView('view-day', btnDay, 'day'); });
            btnMonth.addEventListener('click', () => { switchView('view-month', btnMonth, 'month'); });
            btnPosition.addEventListener('click', () => { switchView('view-position', btnPosition); });
            btnDynamics.addEventListener('click', () => { switchView('view-dynamics', btnDynamics); });

            fetchDashboardData('day');
        });
    </script>
</body>
</html>
