<!DOCTYPE html>
<html lang="ru">
<head>
    <!-- Весь <head> без изменений -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Дашборд для Telegram Web App</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <style>
        /* Стили без изменений */
        /* Добавим стиль для логов, чтобы текст был меньше и не переносился */
        .debug-log {
            font-family: monospace;
            font-size: 10px;
            white-space: pre;
            margin-bottom: 5px;
        }
        .debug-log.error { color: red; font-weight: bold; }
        .debug-log.success { color: green; font-weight: bold; }
    </style>
</head>
<body>
    <!-- HTML-структура без изменений -->
    <div class="dashboard-container">
        <!-- ... -->
        <div class="block-c">
            <div class="block-c-top" id="debug-output"> <!-- Используем этот блок для вывода логов -->
                <p class="debug-log">Запуск отладки...</p>
            </div>
            <div class="block-c-bottom">
                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTTAxrOH3BsNrlwQ7MRFAM5YQfoyo4uSbgQVg&s" alt="Кот" class="cat-image">
            </div>
        </div>
        <!-- ... -->
    </div>

    <script>
        // === Новая вспомогательная функция для логирования на экране ===
        function logToScreen(message, type = 'info') {
            const output = document.getElementById('debug-output');
            const logEntry = document.createElement('p');
            logEntry.className = 'debug-log';
            if (type === 'error') {
                logEntry.classList.add('error');
            } else if (type === 'success') {
                logEntry.classList.add('success');
            }
            logEntry.textContent = message;
            output.appendChild(logEntry);
        }

        // Константы и другие функции без изменений
        const supabaseUrl = 'https://yhjrhnglgtenxwncrrnf.supabase.co';
        // ... и т.д. ...
        function updateTagsTable(data) { /* ... */ }
        function updateDoughnutChart(percentage = 0) { /* ... */ }


        // === ДИАГНОСТИЧЕСКАЯ ВЕРСИЯ ГЛАВНОЙ ФУНКЦИИ ===
        async function fetchDashboardData(tableName) {
            logToScreen("ЗАПУСК: функция fetchDashboardData вызвана.");
            document.getElementById('operator-name').textContent = 'Определение пользователя...';

            let userIdentifier = null;
            let userIdentifierForDisplay = 'Неизвестный';

            logToScreen("ШАГ 1: Проверка window.Telegram...");
            if (window.Telegram && window.Telegram.WebApp) {
                logToScreen("УСПЕХ: Объект window.Telegram.WebApp найден!", "success");
                const tgWebApp = window.Telegram.WebApp;
                tgWebApp.ready();
                
                logToScreen("ШАГ 2: Проверка initDataUnsafe...");
                const initData = tgWebApp.initDataUnsafe;
                if (initData && Object.keys(initData).length > 0) {
                    logToScreen("УСПЕХ: initDataUnsafe не пустой!", "success");
                    logToScreen(`  Содержимое: ${JSON.stringify(initData)}`);
                    const user = initData.user;

                    logToScreen("ШАГ 3: Проверка объекта user...");
                    if (user) {
                        logToScreen("УСПЕХ: Объект user найден!", "success");
                        logToScreen(`  Содержимое: ${JSON.stringify(user)}`);
                        if (user.username) {
                            userIdentifier = user.username;
                            userIdentifierForDisplay = `@${user.username}`;
                        } else if (user.id) {
                            userIdentifier = user.id.toString();
                            userIdentifierForDisplay = `ID: ${user.id}`;
                        }
                    } else {
                        logToScreen("ОШИБКА: Объект user не найден внутри initData!", "error");
                    }
                } else {
                    logToScreen("ОШИБКА: initDataUnsafe пустой или отсутствует!", "error");
                }
            } else {
                logToScreen("КРИТИЧЕСКАЯ ОШИБКА: window.Telegram.WebApp не найден!", "error");
            }
            
            logToScreen("ШАГ 4: Финальный идентификатор: " + userIdentifier);
            if (!userIdentifier) {
                document.getElementById('operator-name').textContent = 'Не удалось определить пользователя';
                logToScreen("ИТОГ: Идентификатор не получен. Загрузка прервана.", "error");
                return;
            }

            // Далее обычная логика запроса к Supabase
            try {
                const { data, error } = await supabaseClient
                    .from(tableName)
                    .select('...') // Ваш список полей
                    .eq('tg', userIdentifier)
                    .single();
                if (error) { throw error; }
                if (data) {
                    logToScreen("УСПЕХ: Данные из Supabase загружены!", "success");
                    // ... обновление интерфейса ...
                }
            } catch (error) {
                logToScreen(`ОШИБКА SUPABASE: ${error.message}`, "error");
                if (error.code === 'PGRST116') {
                    document.getElementById('os-text').textContent = `Ваш идентификатор '${userIdentifierForDisplay}' не зарегистрирован.`;
                }
            }
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            // ... остальной код без изменений ...
            fetchDashboardData('TMday');
        });
    </script>
</body>
</html>
