<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Дашборд</title>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- ИЗМЕНЕНИЕ: Добавлена библиотека для работы с Telegram Web App -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary-blue: #007AFF; --dark-blue: #0056b3; --light-blue: #EAF5FF;
            --primary-green: #34C759; --light-green: #E3F8E9; --primary-yellow: #FF9500;
            --light-yellow: #FFF6E5; --bg-color: #F5F7FA; --card-color: #FFFFFF;
            --text-primary: #1D232A; --text-secondary: #6C757D; --border-color: #E9ECEF;
            --light-red: #FFE3E3; --indicator-green: #28a745; --indicator-red: #dc3545;
            --chart-red: #e53935; --chart-blue: #1e88e5;
        }
        body, html { height: 100%; margin: 0; font-family: 'Inter', sans-serif; background-color: var(--bg-color); color: var(--text-primary); overflow-x: hidden; }
        .dashboard-container { display: flex; flex-direction: column; min-height: 100vh; }
        .block-v { height: 10vh; display: flex; justify-content: space-between; align-items: center; padding: 0 24px; background-color: var(--card-color); border-bottom: 1px solid var(--border-color); box-sizing: border-box; flex-shrink: 0; }
        .header-buttons button { margin-right: 12px; padding: 10px 20px; border: none; border-radius: 8px; background-color: var(--dark-blue); color: white; cursor: pointer; font-size: 14px; font-weight: 600; transition: background-color 0.2s, opacity 0.2s; opacity: 0.6; }
        .header-buttons button.active { opacity: 1; }
        .user-info-container { display: flex; align-items: center; gap: 16px; text-align: right; }
        #operator-name { font-weight: 700; font-size: 22px; }
        .content-area { flex-grow: 1; padding: 12px; box-sizing: border-box; overflow: hidden; }
        .view { display: none; }
        .view.active { display: flex; }
        #view-day, #view-month, #view-position, #view-dynamics { flex-direction: row; gap: 12px; height: calc(90vh - 24px); }
        .view:not(#view-day):not(#view-month):not(#view-position):not(#view-dynamics) { align-items: center; justify-content: center; }
        .block-l { width: 400px; flex-shrink: 0; }
        .block-c { flex-grow: 1; }
        .block-p { width: 400px; flex-shrink: 0; }
        .block-l, .block-c, .block-p, .block-team-custom, .dynamics-block { padding: 20px; box-sizing: border-box; display: flex; flex-direction: column; background-color: var(--card-color); border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.04); }
        .block-l-top { height: 50%; position: relative; display: flex; justify-content: center; align-items: center; }
        .chart-center-text { position: absolute; text-align: center; pointer-events: none; }
        .chart-center-text .title { font-size: 18px; color: var(--text-secondary); }
        .chart-center-text .value { font-size: 30px; font-weight: 700; }
        .block-l-bottom { height: 50%; display: flex; flex-direction: column; justify-content: center; gap: 16px; }
        .horizontal-bar { height: 45px; border-radius: 10px; display: flex; align-items: center; padding-left: 15px; font-size: 16px; font-weight: 500; transition: transform 0.2s ease; }
        .horizontal-bar:hover { transform: scale(1.02); }
        .bar-calls { background-color: var(--light-blue); color: var(--primary-blue); width: 100%; }
        .bar-leads { background-color: var(--light-yellow); color: var(--primary-yellow); width: 80%; }
        .bar-time { background-color: var(--light-green); color: var(--primary-green); width: 60%; }
        .block-c-top { height: 75%; overflow-y: auto; background-color: #F8F9FA; padding: 16px; border-radius: 8px; font-size: 15px; line-height: 1.6; }
        .block-c-top p { margin: 0; white-space: pre-line; }
        .block-c-bottom { height: 25%; display: flex; justify-content: center; align-items: center; padding-top: 20px; }
        .cat-image { max-width: 100%; max-height: 100%; border-radius: 8px; object-fit: cover; }
        .block-p { display: flex; flex-direction: column; }
        .data-table { width: 100%; border-collapse: collapse; } 
        .data-table th, .data-table td { border-bottom: 1px solid var(--border-color); padding: 8px; text-align: left; vertical-align: middle; }
        .data-table td { font-size: 14px; text-align: center;}
        .data-table tr:last-child td { border-bottom: none; }
        .data-table th { background-color: var(--dark-blue); color: white; font-size: 14px; font-weight: 600; position: sticky; top: -1px; text-align: center;}
        .data-table tr.highlight-red { background-color: var(--light-red); }
        .data-table tr.current-user-row { background-color: var(--light-blue) !important; font-weight: 600; }
        .block-title { font-size: 20px; font-weight: 700; margin-bottom: 16px; text-align: center; }
        .indicator-col { width: 30px; text-align: center; font-size: 18px; font-weight: bold; }
        .indicator-green { color: var(--indicator-green); }
        .indicator-red { color: var(--indicator-red); }
        .separator-right { border-right: 2px solid var(--dark-blue); }
        #view-month .block-c-top { height: 60%; }
        #view-month .block-c-bottom-month { height: auto; flex-grow: 1; flex-direction: row; display: flex; gap: 12px; align-items: center; justify-content: center; padding-top: 20px;}
        #view-month .plan-indicator { flex-grow: 1; background-color: var(--dark-blue); color: white; border-radius: 12px; display: flex; flex-direction: column; justify-content: center; align-items: center; font-size: 13px; font-weight: 500; padding: 8px; text-align: center; height: 100%; max-height: 100px;}
        #view-month .plan-indicator .value { font-size: 22px; font-weight: 700; margin-top: 4px; }
        #view-month .block-p-upper-month { flex-shrink: 0; }
        #view-month .block-p-lower-month { flex-grow: 1; overflow-y: auto; padding-top: 20px; }
        .block-p-upper-day { flex-shrink: 0; }
        .block-p-lower-day { flex-grow: 1; overflow-y: auto; padding-top: 20px; }
        .placeholder-message { font-size: 22px; color: var(--text-secondary); }
        .dynamics-grid { display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 1fr 1fr; gap: 12px; width: 100%; height: 100%; }
        .dynamics-block { justify-content: flex-start; align-items: stretch; font-size: 24px; color: var(--text-secondary); }
        .chart-container { flex-grow: 1; position: relative; }
        #block-np { padding: 0; background-color: transparent; box-shadow: none; align-items: stretch; }
        .legend-container { flex-shrink: 0; height: auto; width: 100%; padding: 12px 20px; display: flex; justify-content: center; align-items: center; gap: 30px; background-color: var(--card-color); border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.04); margin-bottom: 12px; box-sizing: border-box; }
        .legend-item { display: flex; align-items: center; gap: 8px; font-size: 14px; font-weight: 500;}
        .legend-color-box { width: 15px; height: 15px; border-radius: 4px; }
        #dynamics-os-block { flex-grow: 1; padding: 20px; background-color: var(--card-color); border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.04); }
        
        @media (max-width: 1024px) {
            #view-day, #view-month, #view-position, #view-dynamics { flex-direction: column; height: auto; }
            .block-l, .block-c, .block-p, .block-team-custom { min-height: auto; }
            .block-v { height: auto; padding: 12px; flex-wrap: wrap; gap: 10px; }
            #operator-name { font-size: 18px; }
            .dynamics-grid { grid-template-columns: 1fr; grid-template-rows: auto; }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- ... HTML ... -->
    </div>

    <script>
        // --- ПОДКЛЮЧЕНИЕ К SUPABASE ---
        const SUPABASE_URL = 'https://yhjrhnglgtenxwncrrnf.supabase.co'; 
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InloanJobmdsZ3Rlbnh3bmNycm5mIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzA4MDcwOSwiZXhwIjoyMDY4NjU2NzA5fQ.n-DaOFmspPq26s4QjmP-nQ7FoktOxmvq5JavTKdysBo';
        const supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // --- ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ ---
        let doughnutChartDay, doughnutChartMonth, trafficLineChart, leadsLineChart, timePerLeadLineChart;
        let currentUserTgId = "don_liar"; // Запасной TG ID по умолчанию
        let currentUserName = "", currentUserPosition = "", currentUserTeam = "";
        
        const TAG_MAP = {"t_net": "Теги не проставлены", "t_avtootvet": "Автоответчик", "t_lid": "Лид", "t_neinteres": "Не интересно", "t_finorg": "Фин. орг.", "t_perezvon": "Перезвонить позже", "t_woman": "Женщина", "t_sbros": "Сброс", "t_nomany": "Нет денег", "t_buisnes": "Есть бизнес", "t_mat": "Ругается", "t_idiot": "Неадекват", "t_deti": "Дети", "t_old": "Пенсионер", "t_bankrot": "Банкрот", "t_duble": "Дубль", "t_gos": "Госслужащие"};
        const CAT_IMAGE_MAP = {1: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat1.png', 2: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat2.png', 3: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat3.png', 4: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat4.png', 5: 'https://yhjrhnglgtenxwncrrnf.supabase.co/storage/v1/object/public/cats/cat5.png'};
        const DEFAULT_CAT_IMAGE = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTTAxrOH3BsNrlwQ7MRFAM5YQfoyo4uSbgQVg&s';
        
        // --- ФУНКЦИИ-ПОМОЩНИКИ ---
        function capitalizeFirstLetter(string) { return string.charAt(0).toUpperCase() + string.slice(1); }
        function formatInterval(intervalStr) { if (!intervalStr) return "00:00:00"; return intervalStr.split('.')[0]; }
        function updateDoughnutChart(chartInstance, percentage = 0) { if (!chartInstance) return; const validPercentage = Math.max(0, Math.min(100, percentage)); chartInstance.data.datasets[0].data = [validPercentage, 100 - validPercentage]; chartInstance.update(); }
        function setComparisonIndicator(elementId, userValue, avgValue, isTime = false) { const element = document.getElementById(elementId); if (!element || userValue === null || userValue === undefined || avgValue === null || avgValue === undefined) { if (element) element.textContent = '---'; return; } const userSeconds = isTime ? timeToSeconds(userValue) : parseFloat(userValue); const avgSeconds = isTime ? timeToSeconds(avgValue) : parseFloat(avgValue); let userIsBetter = isTime ? userSeconds < avgSeconds : userSeconds > avgSeconds; element.textContent = userIsBetter ? '>' : '<'; element.className = userIsBetter ? 'indicator-col indicator-green' : 'indicator-col indicator-red'; }
        function timeToSeconds(timeStr) { if (!timeStr || typeof timeStr !== 'string') return 0; const parts = formatInterval(timeStr).split(':'); if (parts.length !== 3) return 0; return parseInt(parts[0], 10) * 3600 + parseInt(parts[1], 10) * 60 + parseInt(parts[2], 10); }
        function timeToHours(timeStr) { if (!timeStr) return 0; const totalSeconds = timeToSeconds(timeStr); return totalSeconds / 3600; }
        function applyRelativeGradient(selector, isReversed = false) { const cells = document.querySelectorAll(selector); if (cells.length === 0) return; const values = Array.from(cells).map(cell => { const text = cell.textContent; if (text.includes(':')) { return timeToSeconds(text); } return parseFloat(text.replace('%', '')); }); const min = Math.min(...values); const max = Math.max(...values); if (min === max) return; const range = max - min; cells.forEach((cell, index) => { const value = values[index]; let normalized = (value - min) / range; if (isReversed) normalized = 1 - normalized; const hue = normalized * 120; cell.style.backgroundColor = `hsl(${hue}, 90%, 85%)`; cell.style.color = `hsl(${hue}, 80%, 25%)`; cell.style.fontWeight = '600'; cell.style.borderRadius = '4px'; }); }
        function updateTagsTable(tbodyId, data) { const tbody = document.getElementById(tbodyId); if (!tbody || !data) { tbody.innerHTML = '<tr><td colspan="2">Нет данных</td></tr>'; return; } tbody.innerHTML = ''; const tagsArray = Object.keys(data).filter(key => key.startsWith('t_') && key !== 't_os').map(key => ({ key, name: TAG_MAP[key] || key, count: data[key] || 0 })).filter(tag => tag.count > 0).sort((a, b) => b.count - a.count); if (tagsArray.length === 0) { tbody.innerHTML = '<tr><td colspan="2">Теги не найдены</td></tr>'; return; } tagsArray.forEach(tag => { const row = document.createElement('tr'); if (tag.key === 't_net') row.classList.add('highlight-red'); row.innerHTML = `<td>${tag.name}</td><td>${tag.count}</td>`; tbody.appendChild(row); }); }
        function createOrUpdateLineChart(canvasId, chartInstance, labels, yourData, avgData, yAxisFormatter) { const ctx = document.getElementById(canvasId).getContext('2d'); const data = { labels: labels, datasets: [ { label: 'Средние значения', data: avgData, borderColor: '#1e88e5', backgroundColor: '#1e88e5', borderWidth: 4, tension: 0.4, pointRadius: 5, pointBackgroundColor: 'white', pointBorderColor: '#1e88e5', pointBorderWidth: 2 }, { label: 'Твои значения', data: yourData, borderColor: '#e53935', backgroundColor: '#e53935', borderWidth: 4, tension: 0.4, pointRadius: 5, pointBackgroundColor: 'white', pointBorderColor: '#e53935', pointBorderWidth: 2 } ] }; const options = { responsive: true, maintainAspectRatio: false, interaction: { mode: 'index', intersect: false, }, plugins: { legend: { display: false }, tooltip: { enabled: true, backgroundColor: 'rgba(0, 0, 0, 0.85)', titleColor: '#FFFFFF', bodyColor: '#FFFFFF', titleFont: { size: 14, weight: 'bold' }, bodyFont: { size: 12 }, padding: 12, cornerRadius: 8, displayColors: true, borderColor: 'rgba(0,0,0,0)', borderWidth: 0, callbacks: { labelColor: function(context) { return { borderColor: context.dataset.borderColor, backgroundColor: context.dataset.borderColor, borderWidth: 2, borderRadius: 2, }; }, title: function(tooltipItems) { const label = tooltipItems[0].label; return capitalizeFirstLetter(label); }, label: function(context) { let label = context.dataset.label || ''; if (label) { label += ': '; } if (context.parsed.y !== null) { label += yAxisFormatter(context.parsed.y); } return label; } } } }, scales: { y: { beginAtZero: true, ticks: { callback: yAxisFormatter } } } }; if (chartInstance) { chartInstance.data = data; chartInstance.options = options; chartInstance.update(); return chartInstance; } else { return new Chart(ctx, { type: 'line', data: data, options: options }); } }

        // --- ОСНОВНЫЕ ФУНКЦИИ ЗАГРУЗКИ ---
        
        async function fetchDashboardData(period) {
            const userTable = period === 'day' ? 'TMday' : 'TMmonth';
            const avgTable = period === 'day' ? 'AVGday' : 'AVGmonth';
            const userRequest = supabaseClient.from(userTable).select('*').eq('tg', currentUserTgId).maybeSingle();
            const avgRequest = supabaseClient.from(avgTable).select('*').maybeSingle();
            const [userResponse, avgResponse] = await Promise.all([userRequest, avgRequest]);

            if (userResponse.error || avgResponse.error) { console.error(`Ошибка Supabase:`, userResponse.error || avgResponse.error); alert(`Произошла ошибка при загрузке данных. Подробности в консоли.`); return; }
            const userData = userResponse.data;
            const avgData = avgResponse.data;
            if (!userData) { alert(`Данные для пользователя с tg ID "${currentUserTgId}" не найдены в таблице ${userTable}.`); return; }
            if (!avgData) { alert(`Средние данные не найдены в таблице ${avgTable}.`); return; }

            currentUserName = userData.operator;
            currentUserPosition = userData.dolg;
            currentUserTeam = userData.team;

            document.getElementById('operator-name').textContent = currentUserName;
            if (currentUserPosition) { document.getElementById('btn-position').textContent = `Все ${currentUserPosition}`; }

            if (period === 'day') {
                document.getElementById('context-name').textContent = currentUserTeam;
                document.getElementById('trafic-value-day').textContent = formatInterval(userData.trafic);
                updateDoughnutChart(doughnutChartDay, (userData.per_trafic || 0) * 100);
                document.getElementById('kz-bar-day').textContent = `Количество звонков - ${userData.kz || 0}`;
                document.getElementById('lid-bar-day').textContent = `Количество лидов - ${userData.lid || 0}`;
                document.getElementById('avg-time-lid-bar-day').textContent = `Время на лид - ${formatInterval(userData.avg_time_lid)}`;
                document.getElementById('os-text-day').textContent = userData.OS || "Обратная связь отсутствует.";
                document.getElementById('cat-image-day').src = CAT_IMAGE_MAP[userData.cat] || DEFAULT_CAT_IMAGE;
                document.getElementById('day-user-kz').textContent = userData.kz;
                document.getElementById('day-srav-kz').textContent = avgData.kz;
                setComparisonIndicator('day-ind-kz', userData.kz, avgData.kz);
                document.getElementById('day-user-lid').textContent = userData.lid;
                document.getElementById('day-srav-lid').textContent = avgData.lid;
                setComparisonIndicator('day-ind-lid', userData.lid, avgData.lid);
                document.getElementById('day-user-time').textContent = formatInterval(userData.avg_time_lid);
                document.getElementById('day-srav-time').textContent = formatInterval(avgData.avg_time_lid);
                setComparisonIndicator('day-ind-time', userData.avg_time_lid, avgData.avg_time_lid, true);
                document.getElementById('day-user-trafic').textContent = formatInterval(userData.trafic);
                document.getElementById('day-srav-trafic').textContent = formatInterval(avgData.trafic);
                setComparisonIndicator('day-ind-trafic', userData.trafic, avgData.trafic, true);
                updateTagsTable('tags-table-body-day', userData);
            } else if (period === 'month') {
                document.getElementById('context-name').textContent = avgData.month || "Месяц";
                document.getElementById('trafic-value-month').textContent = formatInterval(userData.trafic);
                updateDoughnutChart(doughnutChartMonth, (userData.per_trafic || 0) * 100);
                document.getElementById('kz-bar-month').textContent = `Количество звонков - ${userData.kz || 0}`;
                document.getElementById('lid-bar-month').textContent = `Количество лидов - ${userData.lid || 0}`;
                document.getElementById('avg-time-lid-bar-month').textContent = `Время на лид - ${formatInterval(userData.avg_time_lid)}`;
                document.getElementById('os-text-month').textContent = userData.OS || "Обратная связь отсутствует.";
                document.getElementById('plan-trafic-prognoz-value').textContent = `${Math.round((userData.per_trafic_prognoz || 0) * 100)}%`;
                document.getElementById('plan-lid-prognoz-value').textContent = `${Math.round((userData.per_lid_prognoz || 0) * 100)}%`;
                document.getElementById('month-user-kz').textContent = userData.kz;
                document.getElementById('month-srav-kz').textContent = avgData.kz;
                setComparisonIndicator('month-ind-kz', userData.kz, avgData.kz);
                document.getElementById('month-user-lid').textContent = userData.lid;
                document.getElementById('month-srav-lid').textContent = avgData.lid;
                setComparisonIndicator('month-ind-lid', userData.lid, avgData.lid);
                document.getElementById('month-user-time').textContent = formatInterval(userData.avg_time_lid);
                document.getElementById('month-srav-time').textContent = formatInterval(avgData.avg_time_lid);
                setComparisonIndicator('month-ind-time', userData.avg_time_lid, avgData.avg_time_lid, true);
                document.getElementById('month-user-trafic').textContent = formatInterval(userData.trafic);
                document.getElementById('month-srav-trafic').textContent = formatInterval(avgData.trafic);
                setComparisonIndicator('month-ind-trafic', userData.trafic, avgData.trafic, true);
                updateTagsTable('tags-table-body-month', userData);
            }
        }

        async function fetchPositionData() {
            if (!currentUserPosition || !currentUserTeam) { await fetchDashboardData('day'); }
            if (!currentUserPosition) { alert("Не удалось загрузить данные пользователя для определения группы."); return; }

            let filterColumn, filterValue, headerText;

            if (currentUserPosition === 'РГТМ') {
                filterColumn = 'team';
                filterValue = currentUserTeam;
                headerText = currentUserTeam;
            } else {
                filterColumn = 'dolg';
                filterValue = currentUserPosition;
                headerText = currentUserPosition;
            }
            
            document.getElementById('context-name').textContent = headerText;

            const dayRequest = supabaseClient.from('TMday').select('*').eq(filterColumn, filterValue);
            const monthRequest = supabaseClient.from('TMmonth').select('*').eq(filterColumn, filterValue);

            const [dayResponse, monthResponse] = await Promise.all([dayRequest, monthRequest]);

            if (dayResponse.error || monthResponse.error) { console.error("Ошибка при загрузке рейтинга:", dayResponse.error || monthResponse.error); alert("Не удалось загрузить данные для рейтинга."); return; }

            populatePositionTableDay(dayResponse.data);
            populatePositionTableMonth(monthResponse.data);
        }

        function populatePositionTableDay(data) {
            const tbody = document.getElementById('position-data-body-day');
            tbody.innerHTML = '';
            data.sort((a, b) => (b.lid || 0) - (a.lid || 0));
            data.forEach(op => {
                const row = document.createElement('tr');
                if (op.operator === currentUserName) { row.classList.add('current-user-row'); }
                row.innerHTML = `
                    <td class="separator-right">${op.operator || '---'}</td>
                    <td>${formatInterval(op.trafic)}</td>
                    <td class="td-gradient-traffic-day">${Math.round((op.per_trafic || 0) * 100)}%</td>
                    <td>${op.kz || 0}</td>
                    <td>${op.lid || 0}</td>
                    <td class="td-gradient-time-day">${formatInterval(op.avg_time_lid)}</td>
                    <td class="td-gradient-leads-day separator-right">${Math.round((op.per_lid || 0) * 100)}%</td>
                    <td>${formatInterval(op.plan_trafic)}</td>
                    <td>${op.plan_lid || 0}</td>
                `;
                tbody.appendChild(row);
            });
            applyRelativeGradient('.td-gradient-traffic-day');
            applyRelativeGradient('.td-gradient-leads-day');
            applyRelativeGradient('.td-gradient-time-day', true);
        }

        function populatePositionTableMonth(data) {
            const tbody = document.getElementById('position-data-body-month');
            tbody.innerHTML = '';
            data.sort((a, b) => (b.lid || 0) - (a.lid || 0));
            data.forEach(op => {
                const row = document.createElement('tr');
                if (op.operator === currentUserName) { row.classList.add('current-user-row'); }
                row.innerHTML = `
                    <td class="separator-right">${op.operator || '---'}</td>
                    <td>${formatInterval(op.trafic)}</td>
                    <td class="td-gradient-traffic-month">${Math.round((op.per_trafic || 0) * 100)}%</td>
                    <td>${op.kz || 0}</td>
                    <td>${op.lid || 0}</td>
                    <td class="td-gradient-time-month">${formatInterval(op.avg_time_lid)}</td>
                    <td class="td-gradient-leads-month separator-right">${Math.round((op.per_lid || 0) * 100)}%</td>
                    <td>${formatInterval(op.avg_time_post)}</td>
                `;
                tbody.appendChild(row);
            });
            applyRelativeGradient('.td-gradient-traffic-month');
            applyRelativeGradient('.td-gradient-leads-month');
            applyRelativeGradient('.td-gradient-time-month', true);
        }
        
        async function fetchDynamicsData() {
            const { data, error } = await supabaseClient.from('Dynamics').select('*').eq('tg', currentUserTgId).maybeSingle();
            
            if (error) { console.error("Ошибка при загрузке данных для динамики:", error); alert("Не удалось загрузить данные для динамики."); return; }
            if (!data) { alert(`Данные для динамики не найдены для пользователя ${currentUserTgId}.`); return; }

            const labels = [];
            const yourTraffic = [], avgTraffic = [];
            const yourLeads = [], avgLeads = [];
            const yourTime = [], avgTime = [];

            const now = new Date();
            for (let i = 5; i >= 0; i--) {
                const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
                labels.push(date.toLocaleString('ru-RU', { month: 'short' }).replace('.', ''));
            }

            for (let i = 1; i <= 6; i++) {
                yourTraffic.push(timeToHours(data[`${i}trafic`]));
                avgTraffic.push(timeToHours(data[`${i}avg_trafic`]));
                yourLeads.push(data[`${i}lid`] || 0); // Предполагаем, что колонки называются 1lid, 1avg_lid и т.д.
                avgLeads.push(data[`${i}avg_lid`] || 0);
                yourTime.push(timeToSeconds(data[`${i}time`]));
                avgTime.push(timeToSeconds(data[`${i}avg_time`]));
            }

            const firstMonthDate = new Date(now.getFullYear(), now.getMonth() - 5, 1);
            const firstMonthName = firstMonthDate.toLocaleString('ru-RU', { month: 'long' });
            const currentMonthName = now.toLocaleString('ru-RU', { month: 'long' });
            document.getElementById('context-name').textContent = `${capitalizeFirstLetter(firstMonthName)} - ${currentMonthName}`;
            
            trafficLineChart = createOrUpdateLineChart('traffic-line-chart', trafficLineChart, labels, yourTraffic, avgTraffic, (val) => `${Math.round(val)} ч`);
            leadsLineChart = createOrUpdateLineChart('leads-line-chart', leadsLineChart, labels, yourLeads, avgLeads, (val) => `${val}`);
            timePerLeadLineChart = createOrUpdateLineChart('time-per-lead-line-chart', timePerLeadLineChart, labels, yourTime, avgTime, (val) => `${(val / 60).toFixed(1)} мин`);
            document.getElementById('dynamics-os-text').textContent = data.os || "Обратная связь отсутствует.";
        }

        // --- ИНИЦИАЛИЗАЦИЯ И УПРАВЛЕНИЕ ВИДАМИ ---
        document.addEventListener('DOMContentLoaded', () => {
            try {
                if (window.Telegram && window.Telegram.WebApp) {
                    const tgUser = window.Telegram.WebApp.initDataUnsafe?.user;
                    if (tgUser?.username) {
                        currentUserTgId = tgUser.username;
                    }
                }
            } catch (e) {
                console.warn("Не удалось получить данные Telegram Web App. Используется ID по умолчанию.", e);
            }

            const darkBlueColor = getComputedStyle(document.documentElement).getPropertyValue('--dark-blue').trim();
            const chartOptions = { responsive: true, maintainAspectRatio: false, cutout: '80%', plugins: { legend: { display: false }, tooltip: { enabled: false } } };
            const chartDataTemplate = { labels: ['Процент трафика', 'Остаток'], datasets: [{ data: [0, 100], backgroundColor: [ darkBlueColor, '#E9ECEF' ], borderColor: 'transparent' }] };
            
            doughnutChartDay = new Chart(document.getElementById('doughnutChartDay').getContext('2d'), { type: 'doughnut', data: JSON.parse(JSON.stringify(chartDataTemplate)), options: chartOptions });
            doughnutChartMonth = new Chart(document.getElementById('doughnutChartMonth').getContext('2d'), { type: 'doughnut', data: JSON.parse(JSON.stringify(chartDataTemplate)), options: chartOptions });
            
            const btnDay = document.getElementById('btn-day');
            const btnMonth = document.getElementById('btn-month');
            const btnPosition = document.getElementById('btn-position');
            const btnDynamics = document.getElementById('btn-dynamics');
            const allViews = document.querySelectorAll('.view');
            const allButtons = document.querySelectorAll('.header-buttons button');
            const operatorNameEl = document.getElementById('operator-name');
            const contextNameEl = document.getElementById('context-name');

            function switchView(viewId, buttonToActivate, task) {
                allViews.forEach(view => view.style.display = 'none');
                allButtons.forEach(button => button.classList.remove('active'));
                
                const viewToShow = document.getElementById(viewId);
                viewToShow.style.display = 'flex';
                buttonToActivate.classList.add('active');
                
                operatorNameEl.style.display = 'inline';
                contextNameEl.style.display = 'inline';
                contextNameEl.style.fontWeight = '600';
                contextNameEl.style.fontSize = 'inherit';
                contextNameEl.style.color = 'var(--text-secondary)';
                
                if (task === 'day' || task === 'month') {
                    fetchDashboardData(task);
                } else if (task === 'position') {
                    operatorNameEl.style.display = 'none';
                    contextNameEl.style.fontWeight = '700';
                    contextNameEl.style.fontSize = '22px';
                    contextNameEl.style.color = 'var(--text-primary)';
                    fetchPositionData();
                } else if (task === 'dynamics') {
                    operatorNameEl.textContent = currentUserName || "Пользователь";
                    fetchDynamicsData();
                }
            }

            btnDay.addEventListener('click', () => { switchView('view-day', btnDay, 'day'); });
            btnMonth.addEventListener('click', () => { switchView('view-month', btnMonth, 'month'); });
            btnPosition.addEventListener('click', () => { switchView('view-position', btnPosition, 'position'); });
            btnDynamics.addEventListener('click', () => { switchView('view-dynamics', btnDynamics, 'dynamics'); });

            fetchDashboardData('day');
        });
    </script>
</body>
</html>
