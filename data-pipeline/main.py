import pandas as pd
import gspread
import os
import json

# --- [ –ù–ê–°–¢–†–û–ô–ö–ò –°–ö–†–ò–ü–¢–ê ] ---
# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –≤–∞—à–µ–π –≥–ª–∞–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 
# ID –≤–∞—à–µ–π –ï–î–ò–ù–û–ô —Ç–∞–±–ª–∏—Ü—ã (–≥–¥–µ "–î–∞—à–±–æ—Ä–¥", "crm" –∏ "lidscrm")
DASHBOARD_SHEET_ID = '1s_m6Sssjld0BFwhGDVXEC4YRWeH3dYgzNpgiTMwdgSk'
 
# –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–ø–∏—Å–æ–∫ CRM-—Å—Å—ã–ª–æ–∫
SETTINGS_WORKSHEET_NAME = 'crm' 
 
# –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞, –ö–£–î–ê –≤—ã–≥—Ä—É–∂–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
TARGET_WORKSHEET_NAME = 'lidscrm'
 
# --- –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ –∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ –ò–°–•–û–î–ù–´–• CRM-—Ç–∞–±–ª–∏—Ü–∞—Ö ---
TODAY_SHEET_NAME = '–°—Ç–∞—Ç –ø–æ –¢–ú-–ë–†–û (—Å–µ–≥–æ–¥–Ω—è)'
MONTH_SHEET_NAME = '–°—Ç–∞—Ç –ø–æ –¢–ú-–ë–†–û (–º–µ—Å—è—Ü)'
# –ë—É–∫–≤—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
# OPERATOR_COLUMN_LETTER = 'O'
# LEADS_COLUMN_LETTER = 'R'

# –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò: –¢–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—â–µ–º
OPERATOR_COLUMN_NAME = '–¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞' # <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ O
LEADS_COLUMN_NAME_TODAY = '–õ–∏–¥–æ–≤' # <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ R –Ω–∞ –ª–∏—Å—Ç–µ "—Å–µ–≥–æ–¥–Ω—è"
LEADS_COLUMN_NAME_MONTH = '–õ–∏–¥–æ–≤' # <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ R –Ω–∞ –ª–∏—Å—Ç–µ "–º–µ—Å—è—Ü"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

def get_data_from_worksheet(worksheet, operator_col_name, leads_col_name):
    """–ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—Å—Ç–∞."""
    all_values = worksheet.get_all_values()
    if not all_values:
        return pd.DataFrame(columns=['–û–ø–µ—Ä–∞—Ç–æ—Ä', '–õ–∏–¥—ã'])
        
    headers = all_values[0]
    try:
        operator_idx = headers.index(operator_col_name)
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫—É "–¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞", –∏—â–µ–º "–û–ø–µ—Ä–∞—Ç–æ—Ä"
        try:
            operator_idx = headers.index('–û–ø–µ—Ä–∞—Ç–æ—Ä')
        except ValueError:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ('{operator_col_name}' –∏–ª–∏ '–û–ø–µ—Ä–∞—Ç–æ—Ä')")

    try:
        leads_idx = headers.index(leads_col_name)
    except ValueError:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –ª–∏–¥–æ–≤ ('{leads_col_name}')")

    data = []
    for row in all_values[1:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
        if len(row) > max(operator_idx, leads_idx):
            operator = row[operator_idx]
            leads = row[leads_idx]
            if operator: # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                data.append({'–û–ø–µ—Ä–∞—Ç–æ—Ä': operator, '–õ–∏–¥—ã': leads})
                
    return pd.DataFrame(data)


def run_etl():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º...")
     
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    try:
        sa_key_string = os.environ.get('GCP_SA_KEY')
        sa_key_json = json.loads(sa_key_string)
        gc = gspread.service_account_from_dict(sa_key_json)
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
    except Exception as e:
        raise SystemExit(f"üî•üî• –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò: {e}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    try:
        dashboard_spreadsheet = gc.open_by_key(DASHBOARD_SHEET_ID)
        settings_sheet = dashboard_spreadsheet.worksheet(SETTINGS_WORKSHEET_NAME)
        sources_df = pd.DataFrame(settings_sheet.get_all_records())
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(sources_df)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ '{SETTINGS_WORKSHEET_NAME}'.")
    except Exception as e:
        raise SystemExit(f"üî•üî• –û–®–ò–ë–ö–ê —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    all_teams_dataframes = []
    for index, row in sources_df.iterrows():
        team_name = row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')
        sheet_id = row.get('ID —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã')

        if not all([team_name, sheet_id]): 
            print(f"  - –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {index+2} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–Ω–µ—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ ID).")
            continue
         
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {team_name} ---")
        try:
            source_spreadsheet = gc.open_by_key(sheet_id)
             
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –°–ï–ì–û–î–ù–Ø
            try:
                today_ws = source_spreadsheet.worksheet(TODAY_SHEET_NAME)
                df_today = get_data_from_worksheet(today_ws, OPERATOR_COLUMN_NAME, LEADS_COLUMN_NAME_TODAY)
                df_today = df_today.rename(columns={'–õ–∏–¥—ã': '–õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è'})
                print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ '—Å–µ–≥–æ–¥–Ω—è' –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(df_today)} —Å—Ç—Ä–æ–∫).")
            except gspread.exceptions.WorksheetNotFound:
                print(f"  ‚ö†Ô∏è –õ–∏—Å—Ç '{TODAY_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±—É–¥—É—Ç 0.")
                df_today = pd.DataFrame(columns=['–û–ø–µ—Ä–∞—Ç–æ—Ä', '–õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è'])

            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ú–ï–°–Ø–¶
            try:
                month_ws = source_spreadsheet.worksheet(MONTH_SHEET_NAME)
                df_month = get_data_from_worksheet(month_ws, OPERATOR_COLUMN_NAME, LEADS_COLUMN_NAME_MONTH)
                df_month = df_month.rename(columns={'–õ–∏–¥—ã': '–õ–∏–¥–æ–≤ –º–µ—Å—è—Ü'})
                print(f"  ‚úÖ –î–∞–Ω–Ω—ã–µ '–º–µ—Å—è—Ü' –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(df_month)} —Å—Ç—Ä–æ–∫).")
            except gspread.exceptions.WorksheetNotFound:
                print(f"  ‚ö†Ô∏è –õ–∏—Å—Ç '{MONTH_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –±—É–¥—É—Ç 0.")
                df_month = pd.DataFrame(columns=['–û–ø–µ—Ä–∞—Ç–æ—Ä', '–õ–∏–¥–æ–≤ –º–µ—Å—è—Ü'])
                 
            # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
            if df_today.empty and df_month.empty:
                print("  ‚ùå –í –æ–±–µ–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É.")
                continue
             
            merged_df = pd.merge(df_today, df_month, on='–û–ø–µ—Ä–∞—Ç–æ—Ä', how='outer')
            merged_df['–ö–æ–º–∞–Ω–¥–∞'] = team_name
            all_teams_dataframes.append(merged_df)
             
        except Exception as e:
            print(f"    -> üî• –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è '{team_name}': {e}")
     
    if not all_teams_dataframes:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
    final_df = pd.concat(all_teams_dataframes, ignore_index=True)
    final_df.fillna(0, inplace=True)
    final_df = final_df[['–ö–æ–º–∞–Ω–¥–∞', '–û–ø–µ—Ä–∞—Ç–æ—Ä', '–õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è', '–õ–∏–¥–æ–≤ –º–µ—Å—è—Ü']]
    final_df = final_df[final_df['–û–ø–µ—Ä–∞—Ç–æ—Ä'].astype(str).str.strip() != '']
     
    print(f"\n‚úÖ –ò—Ç–æ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(final_df)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.")
     
    # –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try:
        target_worksheet = dashboard_spreadsheet.worksheet(TARGET_WORKSHEET_NAME)
        target_worksheet.clear()
        data_to_upload = [final_df.columns.values.tolist()] + final_df.values.tolist()
        target_worksheet.update(data_to_upload, value_input_option='USER_ENTERED')
        target_worksheet.format('A1:Z1', {'textFormat': {'bold': True}})
        print(f"üéâ –£–°–ü–ï–•! –î–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –ª–∏—Å—Ç '{TARGET_WORKSHEET_NAME}'.")
    except Exception as e:
        raise SystemExit(f"üî•üî• –û–®–ò–ë–ö–ê –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    run_etl()
